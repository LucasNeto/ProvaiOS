//
//  ListRepoInteractor.swift
//  ProvaiOS
//
//  Created by Lucas  N Santana on 18/11/20.
//  Copyright (c) 2020 Lucas  N Santana. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListRepoInteractorProtocol {
    func getRepos()
}

protocol ListRepoDataStore {
    var listRepos: [RepoItem]? { get set }
}

class ListRepoInteractor: ListRepoInteractorProtocol, ListRepoDataStore {
    var presenter: ListRepoPresenterProtocol?
    var repository: ListRepoRepositoryProtocol?
    var listRepos: [RepoItem]?
    
    init(repository: ListRepoRepositoryProtocol, presenter: ListRepoPresenterProtocol){
        self.repository = repository
        self.presenter = presenter
    }
    
    // MARK: get Repos
    func getRepos() {
        self.repository?.getRepos(completion: { (result) in
            switch result{
            case .success(let list):
                self.listRepos = list
                self.presenter?.presentListRepo(list: list)
                break
            case .failure(let error):
                self.presenter?.presentError(error: error.getMessage())
                break
            }
        })
    }
}
